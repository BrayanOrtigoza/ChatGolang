{"ast":null,"code":"import _classCallCheck from \"/home/developermensajeros/Documentos/Go/src/Chat3.0/frontchat/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/developermensajeros/Documentos/Go/src/Chat3.0/frontchat/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/developermensajeros/Documentos/Go/src/Chat3.0/frontchat/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/developermensajeros/Documentos/Go/src/Chat3.0/frontchat/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/developermensajeros/Documentos/Go/src/Chat3.0/frontchat/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/developermensajeros/Documentos/Go/src/Chat3.0/frontchat/src/components/channels/index.js\";\nimport React, { Component } from 'react';\nimport Message from './../message/index';\nimport User from './../user/index';\nimport { getService } from \"./../../services/services\";\nimport { Routes } from \"./../../services/routes\";\nimport { postService } from \"../../services/services\";\nimport Socket from \"../socket/socket\";\n\nvar ContainerChannels =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(ContainerChannels, _Component);\n\n  function ContainerChannels(props) {\n    var _this;\n\n    _classCallCheck(this, ContainerChannels);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ContainerChannels).call(this, props));\n    _this.state = {\n      arraypeople: [],\n      arrayMessage: [],\n      id_people: '',\n      connected: false\n    };\n    return _this;\n  }\n\n  _createClass(ContainerChannels, [{\n    key: \"componentWillMount\",\n    value: function componentWillMount() {\n      this.makeListPeople();\n      var ws = new WebSocket('ws://10.10.101.155:4000');\n      var socket = this.socket = new Socket(ws);\n      socket.on('connect', this.onConnect.bind(this));\n      socket.on('disconnect', this.onDisconnect.bind(this));\n      socket.on('message add', this.onMessageAdd.bind(this));\n    }\n  }, {\n    key: \"makeListPeople\",\n    value: function makeListPeople() {\n      var _this2 = this;\n\n      var token = localStorage.getItem('@websession');\n      var headers = {\n        Authorization: 'Bearer ' + token,\n        'Content-Type': 'application/json',\n        'Accept': 'application/json'\n      };\n      getService(Routes.LISTPEOPLE, headers).then(function (data) {\n        _this2.setState({\n          arraypeople: data\n        });\n      });\n    }\n  }, {\n    key: \"findMessagePeople\",\n    value: function findMessagePeople(e) {\n      var _this3 = this;\n\n      var token = localStorage.getItem('@websession');\n      var headers = {\n        Authorization: 'Bearer ' + token,\n        'Content-Type': 'application/json',\n        'Accept': 'application/json'\n      };\n      var body = {\n        Id_people: e\n      };\n      postService(Routes.LISTMESSAGE, body, headers).then(function (data) {\n        if (data !== null) {\n          _this3.setState({\n            arrayMessage: data,\n            id_people: e\n          });\n        }\n      });\n      this.setChannel(\"aa9c376a-6bda-4829-99c8-d6198f099521\");\n    }\n  }, {\n    key: \"onConnect\",\n    value: function onConnect() {\n      this.setState({\n        connected: true\n      });\n    }\n  }, {\n    key: \"onDisconnect\",\n    value: function onDisconnect() {\n      this.setState({\n        connected: false\n      });\n    }\n  }, {\n    key: \"onMessageAdd\",\n    value: function onMessageAdd(message) {\n      console.log(message);\n      this.state.arrayMessage.push(message);\n    } // Sets the channel the user wants to talk to\n\n  }, {\n    key: \"setChannel\",\n    value: function setChannel(activeChannel) {\n      this.socket.emit('message subscribe', {\n        channelId: activeChannel\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this4 = this;\n\n      return React.createElement(\"div\", {\n        className: \"inbox_msg\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"inbox_people\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98\n        },\n        __self: this\n      }, React.createElement(User, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"inbox_chat\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100\n        },\n        __self: this\n      }, this.state.arraypeople.map(function (element, index) {\n        return React.createElement(\"div\", {\n          className: \"chat_list active_chat\",\n          key: index,\n          onClick: function onClick() {\n            return _this4.findMessagePeople(element.id);\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 103\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          className: \"chat_people\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 104\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          className: \"chat_img\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 105\n          },\n          __self: this\n        }, React.createElement(\"img\", {\n          src: \"https://ptetutorials.com/images/user-profile.png\",\n          alt: \"sunil\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 105\n          },\n          __self: this\n        })), React.createElement(\"div\", {\n          className: \"chat_ib\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 107\n          },\n          __self: this\n        }, React.createElement(\"h5\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 108\n          },\n          __self: this\n        }, element.name, \" \", element.last_name))));\n      }))), this.props.Messages.map(function (element, index) {\n        return React.createElement(\"div\", {\n          className: \"mesgs\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 118\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          className: \"msg_history\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 119\n          },\n          __self: this\n        }, React.createElement(Message, {\n          key: index,\n          createdAt: element.createdAt,\n          id_people: _this4.state.id_people,\n          id_people_message: _this4.state.id_people_message,\n          message: element.message,\n          author: element.author,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 120\n          },\n          __self: this\n        })));\n      }));\n    }\n  }]);\n\n  return ContainerChannels;\n}(Component);\n\nexport default ContainerChannels;","map":{"version":3,"sources":["/home/developermensajeros/Documentos/Go/src/Chat3.0/frontchat/src/components/channels/index.js"],"names":["React","Component","Message","User","getService","Routes","postService","Socket","ContainerChannels","props","state","arraypeople","arrayMessage","id_people","connected","makeListPeople","ws","WebSocket","socket","on","onConnect","bind","onDisconnect","onMessageAdd","token","localStorage","getItem","headers","Authorization","LISTPEOPLE","then","data","setState","e","body","Id_people","LISTMESSAGE","setChannel","message","console","log","push","activeChannel","emit","channelId","map","element","index","findMessagePeople","id","name","last_name","Messages","createdAt","id_people_message","author"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport Message from './../message/index'\r\nimport User from './../user/index'\r\nimport {getService} from \"./../../services/services\";\r\nimport {Routes} from \"./../../services/routes\";\r\nimport {postService} from \"../../services/services\";\r\nimport Socket from \"../socket/socket\";\r\n\r\nclass ContainerChannels extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            arraypeople: [],\r\n            arrayMessage: [],\r\n            id_people:'',\r\n            connected: false\r\n        }\r\n    }\r\n\r\n\r\n    componentWillMount() {\r\n        this.makeListPeople()\r\n        let ws = new WebSocket('ws://10.10.101.155:4000')\r\n        let socket = this.socket = new Socket(ws);\r\n        socket.on('connect', this.onConnect.bind(this));\r\n        socket.on('disconnect', this.onDisconnect.bind(this));\r\n        socket.on('message add', this.onMessageAdd.bind(this));\r\n    }\r\n\r\n\r\n    makeListPeople(){\r\n        let token = localStorage.getItem('@websession');\r\n\r\n        let headers = {\r\n            Authorization: 'Bearer ' + token,\r\n            'Content-Type': 'application/json',\r\n            'Accept': 'application/json'\r\n        };\r\n\r\n        getService(Routes.LISTPEOPLE, headers).then(data => {\r\n            this.setState({\r\n                arraypeople: data,\r\n            });\r\n        });\r\n    }\r\n\r\n    findMessagePeople(e){\r\n        let token = localStorage.getItem('@websession');\r\n\r\n        let headers = {\r\n             Authorization: 'Bearer ' + token,\r\n            'Content-Type': 'application/json',\r\n            'Accept': 'application/json'\r\n        };\r\n\r\n        let body = {\r\n            Id_people: e,\r\n        };\r\n\r\n        postService(Routes.LISTMESSAGE, body, headers).then(data => {\r\n            if (data !== null){\r\n                this.setState({\r\n                    arrayMessage: data,\r\n                    id_people: e,\r\n                });\r\n            }\r\n\r\n        })\r\n        this.setChannel(\"aa9c376a-6bda-4829-99c8-d6198f099521\")\r\n    }\r\n\r\n    onConnect() {\r\n        this.setState({connected: true});\r\n    }\r\n\r\n    onDisconnect() {\r\n        this.setState({connected: false});\r\n    }\r\n\r\n\r\n\r\n    onMessageAdd(message) {\r\n        console.log(message)\r\n        this.state.arrayMessage.push(message)\r\n    }\r\n\r\n\r\n\r\n    // Sets the channel the user wants to talk to\r\n    setChannel(activeChannel) {\r\n        this.socket.emit('message subscribe', {channelId: activeChannel});\r\n    }\r\n\r\n    render() {\r\n        return (\r\n                <div className=\"inbox_msg\">\r\n                    <div className=\"inbox_people\">\r\n                        <User/>\r\n                        <div className=\"inbox_chat\">\r\n                            {this.state.arraypeople.map((element, index) => {\r\n                                return(\r\n                                    <div className=\"chat_list active_chat\" key={index} onClick={()=>this.findMessagePeople(element.id)}>\r\n                                        <div className=\"chat_people\">\r\n                                            <div className=\"chat_img\"><img\r\n                                                src=\"https://ptetutorials.com/images/user-profile.png\" alt=\"sunil\"/></div>\r\n                                            <div className=\"chat_ib\">\r\n                                                <h5>{element.name} {element.last_name}</h5>\r\n                                            </div>\r\n                                        </div>\r\n                                    </div>\r\n                                )\r\n                            })}\r\n                        </div>\r\n                    </div>\r\n                    {this.props.Messages.map((element, index) => {\r\n                    return(\r\n                        <div className=\"mesgs\">\r\n                            <div className=\"msg_history\">\r\n                                <Message  key={index}\r\n                                          createdAt={element.createdAt}\r\n                                          id_people={this.state.id_people}\r\n                                          id_people_message={this.state.id_people_message}\r\n                                          message={element.message}\r\n                                          author={element.author}/>\r\n                            </div>\r\n                        </div>\r\n                        )\r\n                    })}\r\n                </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ContainerChannels;\r\n"]},"metadata":{},"sourceType":"module"}