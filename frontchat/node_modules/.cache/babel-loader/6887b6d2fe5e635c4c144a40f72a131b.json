{"ast":null,"code":"import _classCallCheck from \"/home/developermensajeros/Documentos/Go/src/ChatGolang/frontchat/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/developermensajeros/Documentos/Go/src/ChatGolang/frontchat/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/developermensajeros/Documentos/Go/src/ChatGolang/frontchat/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/developermensajeros/Documentos/Go/src/ChatGolang/frontchat/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/developermensajeros/Documentos/Go/src/ChatGolang/frontchat/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/developermensajeros/Documentos/Go/src/ChatGolang/frontchat/src/components/channels/index.js\";\nimport React, { Component } from 'react';\nimport Message from './../message/index';\nimport User from './../user/index';\nimport { getService } from \"./../../services/services\";\nimport { Routes } from \"./../../services/routes\";\nimport { postService } from \"../../services/services\";\nimport Socket from \"../socket/socket\";\n\nvar ContainerChannels =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(ContainerChannels, _Component);\n\n  function ContainerChannels(props) {\n    var _this;\n\n    _classCallCheck(this, ContainerChannels);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ContainerChannels).call(this, props));\n    _this.state = {\n      arraypeople: [],\n      arraygroups: [],\n      arrayMessage: [],\n      id_people: '',\n      body: '',\n      id_channel: '',\n      connected: false\n    };\n    return _this;\n  }\n\n  _createClass(ContainerChannels, [{\n    key: \"componentWillMount\",\n    value: function componentWillMount() {\n      this.makeListPeople();\n      this.makeListGroups();\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var ws = new WebSocket('ws://10.10.101.155:4000');\n      var socket = this.socket = new Socket(ws);\n      socket.on('connect', this.onConnect.bind(this));\n      socket.on('disconnect', this.onDisconnect.bind(this));\n      socket.on('message add', this.onMessageAdd.bind(this));\n    }\n  }, {\n    key: \"makeListPeople\",\n    value: function makeListPeople() {\n      var _this2 = this;\n\n      var token = localStorage.getItem('@websession');\n      var headers = {\n        Authorization: 'Bearer ' + token,\n        'Content-Type': 'application/json',\n        'Accept': 'application/json'\n      };\n      getService(Routes.LISTPEOPLE, headers).then(function (data) {\n        _this2.setState({\n          arraypeople: data\n        });\n      });\n    }\n  }, {\n    key: \"makeListGroups\",\n    value: function makeListGroups() {\n      var token = localStorage.getItem('@websession');\n      var headers = {\n        Authorization: 'Bearer ' + token,\n        'Content-Type': 'application/json',\n        'Accept': 'application/json'\n      };\n      getService(Routes.LISTGROUPS, headers).then(function (data) {\n        console.log(data);\n      });\n    }\n  }, {\n    key: \"findMessagePeople\",\n    value: function findMessagePeople(e) {\n      var _this3 = this;\n\n      var token = localStorage.getItem('@websession');\n      var headers = {\n        Authorization: 'Bearer ' + token,\n        'Content-Type': 'application/json',\n        'Accept': 'application/json'\n      };\n      var body = {\n        id_people: e\n      };\n      postService(Routes.LISTMESSAGE, body, headers).then(function (data) {\n        if (data.dataMessages !== null) {\n          _this3.setState({\n            arrayMessage: data.dataMessages,\n            id_people: e,\n            id_channel: data.idChannel\n          }, function () {\n            return _this3.setChannel();\n          });\n        } else if (data.dataMessages === null && data.idChannel !== null) {\n          _this3.setState({\n            arrayMessage: [],\n            id_people: e,\n            id_channel: data.idChannel\n          }, function () {\n            return _this3.setChannel();\n          });\n        }\n      });\n    }\n  }, {\n    key: \"onConnect\",\n    value: function onConnect() {\n      this.setState({\n        connected: true\n      });\n    }\n  }, {\n    key: \"onDisconnect\",\n    value: function onDisconnect() {\n      this.setState({\n        connected: false\n      });\n    }\n  }, {\n    key: \"onMessageAdd\",\n    value: function onMessageAdd(message) {\n      // this.state.arrayMessage.push(message);\n      var newArrayMessage = Object.assign(this.state.arrayMessage);\n      newArrayMessage.push(message);\n      this.setState({\n        arrayMessage: newArrayMessage\n      });\n    } // Sets the channel the user wants to talk to\n\n  }, {\n    key: \"setChannel\",\n    value: function setChannel() {\n      this.socket.emit('message subscribe', {\n        channelId: this.state.id_channel\n      });\n    }\n  }, {\n    key: \"MakeMessage\",\n    value: function MakeMessage() {\n      var _this4 = this;\n\n      var token = localStorage.getItem('@websession');\n      var headers = {\n        Authorization: 'Bearer ' + token,\n        'Content-Type': 'application/json',\n        'Accept': 'application/json'\n      };\n      var body = {\n        message: this.state.body,\n        id_people_message: this.state.id_people,\n        id_channel: this.state.id_channel\n      };\n      postService(Routes.MAKEMESSAGE, body, headers).then(function (data) {\n        _this4.setState({\n          body: ''\n        });\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this5 = this;\n\n      return React.createElement(\"div\", {\n        className: \"inbox_msg\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 155\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"inbox_people\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 156\n        },\n        __self: this\n      }, React.createElement(User, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 157\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"inbox_chat\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 158\n        },\n        __self: this\n      }, this.state.arraypeople.map(function (element, index) {\n        return React.createElement(\"div\", {\n          className: \"chat_list active_chat\",\n          key: index,\n          onClick: function onClick() {\n            return _this5.findMessagePeople(element.id);\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 161\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          className: \"chat_people\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 162\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          className: \"chat_img\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 163\n          },\n          __self: this\n        }, React.createElement(\"img\", {\n          src: \"https://ptetutorials.com/images/user-profile.png\",\n          alt: \"sunil\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 163\n          },\n          __self: this\n        })), React.createElement(\"div\", {\n          className: \"chat_ib\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 165\n          },\n          __self: this\n        }, React.createElement(\"h5\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 166\n          },\n          __self: this\n        }, element.name, \" \", element.last_name))));\n      }), this.state.arraygroups.length !== null && this.state.arraygroups.length > 0 && this.state.arraygroups.map(function (element, index) {\n        return React.createElement(\"div\", {\n          className: \"chat_list active_chat\",\n          key: index,\n          onClick: function onClick() {\n            return _this5.findMessagePeople(element.id);\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 174\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          className: \"chat_people\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 175\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          className: \"chat_img\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 176\n          },\n          __self: this\n        }, React.createElement(\"img\", {\n          src: \"https://ptetutorials.com/images/user-profile.png\",\n          alt: \"sunil\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 176\n          },\n          __self: this\n        })), React.createElement(\"div\", {\n          className: \"chat_ib\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 178\n          },\n          __self: this\n        }, React.createElement(\"h5\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 179\n          },\n          __self: this\n        }, element.name))));\n      }))), this.state.id_channel !== '' ? React.createElement(\"div\", {\n        className: \"mesgs\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 188\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"msg_history\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 189\n        },\n        __self: this\n      }, this.state.arrayMessage.map(function (element, index) {\n        return React.createElement(Message, {\n          key: index,\n          id_peoplemessage: element.id_people_message,\n          id_people: _this5.state.id_people,\n          createdAt: element.createdAt,\n          author: element.author,\n          message: element.message,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 191\n          },\n          __self: this\n        });\n      })), React.createElement(\"div\", {\n        className: \"type_msg\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 202\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"input_msg_write\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 203\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        type: \"text\",\n        className: \"write_msg\",\n        placeholder: \"Escribe Un Mensaje\",\n        value: this.state.body,\n        onChange: function onChange(e) {\n          return _this5.setState({\n            body: e.target.value\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 204\n        },\n        __self: this\n      }), React.createElement(\"button\", {\n        onClick: function onClick() {\n          return _this5.MakeMessage();\n        },\n        className: \"msg_send_btn\",\n        type: \"button\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 210\n        },\n        __self: this\n      }, React.createElement(\"i\", {\n        className: \"fa fa-paper-plane-o\",\n        \"aria-hidden\": \"true\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 210\n        },\n        __self: this\n      }))))) : React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 214\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return ContainerChannels;\n}(Component);\n\nexport default ContainerChannels;","map":{"version":3,"sources":["/home/developermensajeros/Documentos/Go/src/ChatGolang/frontchat/src/components/channels/index.js"],"names":["React","Component","Message","User","getService","Routes","postService","Socket","ContainerChannels","props","state","arraypeople","arraygroups","arrayMessage","id_people","body","id_channel","connected","makeListPeople","makeListGroups","ws","WebSocket","socket","on","onConnect","bind","onDisconnect","onMessageAdd","token","localStorage","getItem","headers","Authorization","LISTPEOPLE","then","data","setState","LISTGROUPS","console","log","e","LISTMESSAGE","dataMessages","idChannel","setChannel","message","newArrayMessage","Object","assign","push","emit","channelId","id_people_message","MAKEMESSAGE","map","element","index","findMessagePeople","id","name","last_name","length","createdAt","author","target","value","MakeMessage"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport Message from './../message/index'\r\nimport User from './../user/index'\r\nimport {getService} from \"./../../services/services\";\r\nimport {Routes} from \"./../../services/routes\";\r\nimport {postService} from \"../../services/services\";\r\nimport Socket from \"../socket/socket\";\r\n\r\nclass ContainerChannels extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            arraypeople: [],\r\n            arraygroups: [],\r\n            arrayMessage: [],\r\n            id_people:'',\r\n            body:'',\r\n            id_channel:'',\r\n            connected: false\r\n        }\r\n    }\r\n\r\n\r\n    componentWillMount() {\r\n        this.makeListPeople();\r\n        this.makeListGroups();\r\n\r\n    }\r\n    componentDidMount() {\r\n        let ws = new WebSocket('ws://10.10.101.155:4000')\r\n        let socket = this.socket = new Socket(ws);\r\n        socket.on('connect', this.onConnect.bind(this));\r\n        socket.on('disconnect', this.onDisconnect.bind(this));\r\n        socket.on('message add', this.onMessageAdd.bind(this));\r\n    }\r\n\r\n\r\n    makeListPeople(){\r\n        let token = localStorage.getItem('@websession');\r\n\r\n        let headers = {\r\n            Authorization: 'Bearer ' + token,\r\n            'Content-Type': 'application/json',\r\n            'Accept': 'application/json'\r\n        };\r\n\r\n        getService(Routes.LISTPEOPLE, headers).then(data => {\r\n            this.setState({\r\n                arraypeople: data,\r\n            });\r\n        });\r\n    }\r\n\r\n    makeListGroups(){\r\n        let token = localStorage.getItem('@websession');\r\n\r\n        let headers = {\r\n            Authorization: 'Bearer ' + token,\r\n            'Content-Type': 'application/json',\r\n            'Accept': 'application/json'\r\n        };\r\n\r\n        getService(Routes.LISTGROUPS, headers).then(data => {\r\n            \r\n            console.log(data)\r\n\r\n        });\r\n    }\r\n\r\n    findMessagePeople(e){\r\n        let token = localStorage.getItem('@websession');\r\n\r\n        let headers = {\r\n             Authorization: 'Bearer ' + token,\r\n            'Content-Type': 'application/json',\r\n            'Accept': 'application/json'\r\n        };\r\n\r\n        let body = {\r\n            id_people: e,\r\n        };\r\n\r\n        postService(Routes.LISTMESSAGE, body, headers).then(data => {\r\n            if (data.dataMessages !== null){\r\n                this.setState({\r\n                    arrayMessage: data.dataMessages,\r\n                    id_people: e,\r\n                    id_channel: data.idChannel,\r\n                },()=>this.setChannel());\r\n            }else if(data.dataMessages === null && data.idChannel !== null){\r\n                this.setState({\r\n                    arrayMessage: [],\r\n                    id_people: e,\r\n                    id_channel: data.idChannel,\r\n                },()=>this.setChannel());\r\n            }\r\n\r\n        });\r\n    }\r\n\r\n    onConnect() {\r\n        this.setState({connected: true});\r\n    }\r\n\r\n    onDisconnect() {\r\n        this.setState({connected: false});\r\n    }\r\n\r\n\r\n\r\n    onMessageAdd(message) {\r\n        // this.state.arrayMessage.push(message);\r\n        const newArrayMessage = Object.assign(this.state.arrayMessage);\r\n        newArrayMessage.push(message);\r\n\r\n        this.setState({\r\n            arrayMessage: newArrayMessage\r\n        })\r\n    }\r\n\r\n\r\n\r\n    // Sets the channel the user wants to talk to\r\n    setChannel() {\r\n        this.socket.emit('message subscribe', {channelId: this.state.id_channel});\r\n    }\r\n\r\n    MakeMessage(){\r\n        let token = localStorage.getItem('@websession');\r\n\r\n        let headers = {\r\n            Authorization: 'Bearer ' + token,\r\n            'Content-Type': 'application/json',\r\n            'Accept': 'application/json'\r\n        };\r\n\r\n        let body = {\r\n            message: this.state.body,\r\n            id_people_message: this.state.id_people,\r\n            id_channel: this.state.id_channel,\r\n        };\r\n\r\n        postService(Routes.MAKEMESSAGE, body, headers).then(data => {\r\n\r\n            this.setState({\r\n                body:''\r\n            })\r\n        })\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n                <div className=\"inbox_msg\">\r\n                    <div className=\"inbox_people\">\r\n                        <User/>\r\n                        <div className=\"inbox_chat\">\r\n                            {this.state.arraypeople.map((element, index) => {\r\n                                return(\r\n                                    <div className=\"chat_list active_chat\" key={index} onClick={()=>this.findMessagePeople(element.id)}>\r\n                                        <div className=\"chat_people\">\r\n                                            <div className=\"chat_img\"><img\r\n                                                src=\"https://ptetutorials.com/images/user-profile.png\" alt=\"sunil\"/></div>\r\n                                            <div className=\"chat_ib\">\r\n                                                <h5>{element.name} {element.last_name}</h5>\r\n                                            </div>\r\n                                        </div>\r\n                                    </div>\r\n                                )\r\n                            })}\r\n                            {this.state.arraygroups.length !== null && this.state.arraygroups.length > 0 && this.state.arraygroups.map((element, index) => {\r\n                                return(\r\n                                    <div className=\"chat_list active_chat\" key={index} onClick={()=>this.findMessagePeople(element.id)}>\r\n                                        <div className=\"chat_people\">\r\n                                            <div className=\"chat_img\"><img\r\n                                                src=\"https://ptetutorials.com/images/user-profile.png\" alt=\"sunil\"/></div>\r\n                                            <div className=\"chat_ib\">\r\n                                                <h5>{element.name}</h5>\r\n                                            </div>\r\n                                        </div>\r\n                                    </div>\r\n                                )\r\n                            })}\r\n                        </div>\r\n                    </div>\r\n                    { this.state.id_channel !== '' ?\r\n                    (<div className=\"mesgs\">\r\n                        <div className=\"msg_history\">\r\n                            {this.state.arrayMessage.map((element, index) => {\r\n                                return(<Message\r\n                                        key={index}\r\n                                    id_peoplemessage={element.id_people_message}\r\n                                    id_people={this.state.id_people}\r\n                                    createdAt={element.createdAt}\r\n                                    author={element.author}\r\n                                    message={element.message}\r\n                                    />\r\n                                    )\r\n                            })}\r\n                        </div>\r\n                        <div className=\"type_msg\">\r\n                            <div className=\"input_msg_write\">\r\n                                <input type=\"text\" className=\"write_msg\" placeholder=\"Escribe Un Mensaje\"\r\n                                       value={this.state.body}\r\n                                       onChange={(e) => this.setState({\r\n                                           body: e.target.value\r\n                                       })}\r\n                                />\r\n                                <button onClick={()=>this.MakeMessage()} className=\"msg_send_btn\" type=\"button\"><i className=\"fa fa-paper-plane-o\"\r\n                                                                                                                   aria-hidden=\"true\"/></button>\r\n                            </div>\r\n                        </div>\r\n                    </div>):(<div/>)}\r\n                </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ContainerChannels;\r\n"]},"metadata":{},"sourceType":"module"}