{"ast":null,"code":"import _classCallCheck from \"/home/developermensajeros/Documentos/Go/src/Chat3.0/frontchat/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/developermensajeros/Documentos/Go/src/Chat3.0/frontchat/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { EventEmitter } from 'events';\n\nvar Socket =\n/*#__PURE__*/\nfunction () {\n  function Socket() {\n    var ws = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new WebSocket();\n    var ee = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new EventEmitter();\n\n    _classCallCheck(this, Socket);\n\n    this.ws = ws;\n    this.ee = ee;\n    ws.onmessage = this.message.bind(this);\n    ws.onopen = this.open.bind(this);\n    ws.onclose = this.close.bind(this);\n  } // Message received from server\n\n\n  _createClass(Socket, [{\n    key: \"on\",\n    value: function on(name, fn) {\n      this.ee.on(name, fn);\n    }\n  }, {\n    key: \"off\",\n    value: function off(name, fn) {\n      this.ee.removeListener(name, fn);\n    } // Message sent to server\n\n  }, {\n    key: \"emit\",\n    value: function emit(name, data) {\n      var message = JSON.stringify({\n        name: name,\n        data: data\n      });\n      this.ws.send(message);\n    } // Called when the WebSocket receives a message\n    // The message parameter should be formatted like below before being\n    // stringified:\n    // let msg = {\n    //   name: 'noun verb',\n    //   data: {...}\n    // }\n\n  }, {\n    key: \"message\",\n    value: function message(e) {\n      try {\n        var message = JSON.parse(e.data);\n        this.ee.emit(message.name, message.data);\n      } catch (err) {\n        this.ee.emit('error', err);\n      }\n    } // Called when the WebSocket connection is opened\n\n  }, {\n    key: \"open\",\n    value: function open() {\n      this.ee.emit('connect');\n    } // Called when the WebSocket connection is closed\n\n  }, {\n    key: \"close\",\n    value: function close() {\n      this.ee.emit('disconnect');\n    }\n  }]);\n\n  return Socket;\n}();\n\nexport default Socket;","map":{"version":3,"sources":["/home/developermensajeros/Documentos/Go/src/Chat3.0/frontchat/src/components/socket/socket.js"],"names":["EventEmitter","Socket","ws","WebSocket","ee","onmessage","message","bind","onopen","open","onclose","close","name","fn","on","removeListener","data","JSON","stringify","send","e","parse","emit","err"],"mappings":";;AAAA,SAASA,YAAT,QAA6B,QAA7B;;IAEMC,M;;;AACJ,oBAA2D;AAAA,QAA/CC,EAA+C,uEAA1C,IAAIC,SAAJ,EAA0C;AAAA,QAAzBC,EAAyB,uEAApB,IAAIJ,YAAJ,EAAoB;;AAAA;;AACzD,SAAKE,EAAL,GAAUA,EAAV;AACA,SAAKE,EAAL,GAAUA,EAAV;AACAF,IAAAA,EAAE,CAACG,SAAH,GAAe,KAAKC,OAAL,CAAaC,IAAb,CAAkB,IAAlB,CAAf;AACAL,IAAAA,EAAE,CAACM,MAAH,GAAY,KAAKC,IAAL,CAAUF,IAAV,CAAe,IAAf,CAAZ;AACAL,IAAAA,EAAE,CAACQ,OAAH,GAAa,KAAKC,KAAL,CAAWJ,IAAX,CAAgB,IAAhB,CAAb;AACD,G,CAED;;;;;uBACGK,I,EAAMC,E,EAAI;AACX,WAAKT,EAAL,CAAQU,EAAR,CAAWF,IAAX,EAAiBC,EAAjB;AACD;;;wBAEGD,I,EAAMC,E,EAAI;AACZ,WAAKT,EAAL,CAAQW,cAAR,CAAuBH,IAAvB,EAA6BC,EAA7B;AACD,K,CAED;;;;yBACKD,I,EAAMI,I,EAAM;AACf,UAAMV,OAAO,GAAGW,IAAI,CAACC,SAAL,CAAe;AAACN,QAAAA,IAAI,EAAJA,IAAD;AAAOI,QAAAA,IAAI,EAAJA;AAAP,OAAf,CAAhB;AACA,WAAKd,EAAL,CAAQiB,IAAR,CAAab,OAAb;AACD,K,CAED;AACA;AACA;AACA;AACA;AACA;AACA;;;;4BACQc,C,EAAG;AACT,UAAI;AACF,YAAMd,OAAO,GAAGW,IAAI,CAACI,KAAL,CAAWD,CAAC,CAACJ,IAAb,CAAhB;AACA,aAAKZ,EAAL,CAAQkB,IAAR,CAAahB,OAAO,CAACM,IAArB,EAA2BN,OAAO,CAACU,IAAnC;AACD,OAHD,CAIA,OAAMO,GAAN,EAAW;AACT,aAAKnB,EAAL,CAAQkB,IAAR,CAAa,OAAb,EAAsBC,GAAtB;AACD;AACF,K,CAED;;;;2BACO;AACL,WAAKnB,EAAL,CAAQkB,IAAR,CAAa,SAAb;AACD,K,CAED;;;;4BACQ;AACN,WAAKlB,EAAL,CAAQkB,IAAR,CAAa,YAAb;AACD;;;;;;AAGH,eAAerB,MAAf","sourcesContent":["import { EventEmitter } from 'events';\n\nclass Socket {\n  constructor(ws = new WebSocket(), ee = new EventEmitter()) {\n    this.ws = ws;\n    this.ee = ee;\n    ws.onmessage = this.message.bind(this);\n    ws.onopen = this.open.bind(this);\n    ws.onclose = this.close.bind(this);\n  }\n\n  // Message received from server\n  on(name, fn) {\n    this.ee.on(name, fn);    \n  }\n\n  off(name, fn) {\n    this.ee.removeListener(name, fn);\n  }\n\n  // Message sent to server\n  emit(name, data) {\n    const message = JSON.stringify({name, data});\n    this.ws.send(message);\n  }\n\n  // Called when the WebSocket receives a message\n  // The message parameter should be formatted like below before being\n  // stringified:\n  // let msg = {\n  //   name: 'noun verb',\n  //   data: {...}\n  // }\n  message(e) {\n    try {\n      const message = JSON.parse(e.data);\n      this.ee.emit(message.name, message.data);\n    }\n    catch(err) {\n      this.ee.emit('error', err);\n    }\n  }\n\n  // Called when the WebSocket connection is opened\n  open() {\n    this.ee.emit('connect');\n  }\n\n  // Called when the WebSocket connection is closed\n  close() {\n    this.ee.emit('disconnect');\n  }\n}\n\nexport default Socket;"]},"metadata":{},"sourceType":"module"}